#include <stdio.h>
#include <pthread.h>
#include <stdint.h>
#include <semaphore.h>

#ifndef BTDATA_H
#define BTDATA_H

#include "files.h"
#include "bencode.h"
#include "peer_wire.h"
#include "slice.h"
#include "util.h"

/**************************************
 * 一些常量定义
**************************************/
///////////////////////////////////////////////////////////////////////////////////
#define HANDSHAKE_LEN 68  // peer握手消息的长度, 以字节为单位
#define BT_PROTOCOL "BitTorrent protocol"
#define INFOHASH_LEN 20
#define PEER_ID_LEN 20
#define MAXPEERS 100
#define KEEP_ALIVE_INTERVAL 3

#define PEER_TIME_OUT 10
#define SUB_SLICE_NUM 4
///////////////////////////////////////////////////////////////////////////////////

#define BT_STARTED 0
#define BT_STOPPED 1
#define BT_COMPLETED 2

#define STATE_ENABLE 0
#define STATE_DISABLE 1

/**************************************
 * 数据结构
**************************************/
// Tracker HTTP响应的数据部分
typedef struct _tracker_response {
  int size;       // B编码字符串的字节数
  char* data;     // B编码的字符串
} tracker_response;

// 元信息文件中包含的数据
#define TYPE_UNKNOWN 0
#define TYPE_ONE_FILE 1
#define TYPE_FILES 2
typedef struct _torrentmetadata {
  int info_hash[5]; // torrent的info_hash值(info键对应值的SHA1哈希值)
  char *announce; // tracker的URL
  int length;     // 文件长度, 以字节为单位
  char *name;     // 文件名
  int piece_len;  // 每一个分片的字节数
  int num_pieces; // 分片数量
  char *pieces;   // 针对所有分片的20字节长的SHA1哈希值连接而成的字符串
  int type;     //单文件还是多文件
  file_info *files;     //多文件信息
} torrentmetadata_t;

// 包含在announce url中的数据(例如, 主机名和端口号)
typedef struct _announce_url_t {
  char *hostname;
  int port;
} announce_url_t;

// 由tracker返回的响应中peers键的内容
typedef struct _peerdata {
  char id[21]; // 20用于null终止符
  int port;
  char* ip; // Null终止
} peerdata;

// 包含在tracker响应中的数据
typedef struct _tracker_data {
  int interval;
  int numpeers;
  peerdata* peers;
} tracker_data;

//需要发送给tracker的数据
typedef struct _tracker_request {
  int info_hash[5];
  char peer_id[20];
  int port;
  int uploaded;
  int downloaded;
  int left;
  char ip[16]; // 自己的IP地址, 格式为XXX.XXX.XXX.XXX, 最后以'\0'结尾
} tracker_request;

/**************************************
 * 全局变量
**************************************/
#ifdef DEFINE
///网络参数
char g_my_ip[128]; // 格式为XXX.XXX.XXX.XXX, null终止
char g_my_id[20];//本机的peer_id
int g_peerport; // 作为peer监听的端口号--------------------------------------------------------------------------------
char g_tracker_ip[16]; // tracker的IP地址, 格式为XXX.XXX.XXX.XXX(null终止)
int g_tracker_port;//tracker的端口

///任务属性数据
torrentmetadata_t *g_torrentdata;//torrent文件中的数据
int g_isseed;//本机是种子还是下载者4
char g_downlocation[128];//下载文件路径
int g_infohash[5];//torrent文件info键的特征

///peer
pthread_mutex_t g_peer_pool_mutex;
peer_t *g_peer_pool[MAXPEERS];

///分片记录
piece_t *g_piecefield;
int g_complete_num;
int g_incomplete_num;

/// 这些变量用在函数make_tracker_request中, 它们需要在客户端执行过程中不断更新.
int g_uploaded;//已经上传的字节数
int g_downloaded;//已经下载的字节数
int g_left;//还需下载的字节数

sem_t sem_id;//信号量，指示还有多少分片需要保存
int g_done; // 表明程序是否应该终止
#else
///网络参数
extern char g_my_ip[128]; // 格式为XXX.XXX.XXX.XXX, null终止
extern char g_my_id[20];//本机的peer_id
extern int g_peerport; // 作为peer监听的端口号
extern char g_tracker_ip[16]; // tracker的IP地址, 格式为XXX.XXX.XXX.XXX(null终止)
extern int g_tracker_port;//tracker的端口

///任务属性数据
extern torrentmetadata_t *g_torrentdata;//torrent文件中的数据
extern int g_isseed;//本机是种子还是下载者4
extern char g_downlocation[128];//下载文件路径
extern int g_infohash[5];//torrent文件info键的特征

///peer
extern pthread_mutex_t g_peer_pool_mutex;
extern peer_t *g_peer_pool[MAXPEERS];

///分片记录
extern piece_t *g_piecefield;
extern int g_complete_num;
extern int g_incomplete_num;

/// 这些变量用在函数make_tracker_request中, 它们需要在客户端执行过程中不断更新.
extern int g_uploaded;//已经上传的字节数
extern int g_downloaded;//已经下载的字节数
extern int g_left;//还需下载的字节数

extern sem_t sem_id;//信号量，指示还有多少分片需要保存
extern int g_done; // 表明程序是否应该终止
#endif

#endif
